buildscript {
	ext {
		springBootVersion = '1.4.0.BUILD-SNAPSHOT'
	}
	repositories {
		jcenter()
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "io.franzbecker:gradle-lombok:1.6"
		classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath 'se.transmode.gradle:gradle-docker:1.2'
        classpath 'org.apache.httpcomponents:httpclient:4.5.2'        
        classpath "de.undercouch:gradle-download-task:3.1.1"
	}
}

import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: "io.franzbecker.gradle-lombok"
apply plugin: "org.asciidoctor.convert"
apply plugin: 'docker'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'de.undercouch.download'
apply plugin: 'checkstyle'


group = 'com.microservicesteam'
version = '0.0.1-SNAPSHOT'

jar {
	dependsOn asciidoctor
	baseName = 'nutaxi-route-service'
	version = "${version}"
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

ext {
	googleMapsVersion = '0.1.15'
	snippetsDir = file('build/generated-snippets')
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Brixton.SR3'
	}
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-devtools')
	compile('org.springframework.boot:spring-boot-starter-jersey')
	compile("com.google.maps:google-maps-services:${googleMapsVersion}")
	compile('org.springframework.cloud:spring-cloud-starter-config')
	compile('org.springframework.cloud:spring-cloud-starter-eureka')
	compile('org.springframework.boot:spring-boot-starter-test')


	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')	
}

eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

test {
	outputs.dir snippetsDir
}

asciidoctor {
	attributes 'snippets': snippetsDir
	inputs.dir snippetsDir
	dependsOn test
}

docker {
    baseImage "microservicesteam/nutaxi-java"
}

task prepareDockerFile(type: Copy, dependsOn: build) {
    from ('src/main/docker/Dockerfile') {
        filter(ReplaceTokens, tokens: [artifact: "${jar.archiveName}".toString()])
    }
    into 'build/docker'
}

task buildDocker(type: Docker, dependsOn: prepareDockerFile) {
    //push = true
    applicationName = jar.baseName
    dockerfile = file('build/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

pmd {
	toolVersion = "5.5.1"
}

findbugs {
	toolVersion = "3.0.1"
}


jacoco {
    toolVersion = "0.7.7.201606060606"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task checkstyleConfigDownload(type: de.undercouch.gradle.tasks.download.Download) {
    src 'https://raw.githubusercontent.com/microservicesteam/nutaxi-dev/master/config/checkstyle/checkstyle.xml'
    dest buildDir
}

checkstyle {
    toolVersion = "7.1"
    configFile = new File(buildDir, "checkstyle.xml")
}

checkstyleMain.dependsOn checkstyleConfigDownload
checkstyleTest.dependsOn checkstyleConfigDownload
check.dependsOn jacocoTestReport